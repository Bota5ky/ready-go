#include <bits/stdc++.h>
using namespace std;

#define TEST

typedef unsigned int ui;
struct Path{
    //ID最小的第一个输出；
    //总体按照循环转账路径长度升序排序；
    //同一级别的路径长度下循环转账账号ID序列，按照字典序（ID转为无符号整数后）升序排序
    int length;
    vector<ui> path;

    Path(int length, const vector<ui> &path) : length(length), path(path) {}

    bool operator<(const Path&rhs)const{
        if(length!=rhs.length) return length<rhs.length;
        for(int i=0;i<length;i++){
            if(path[i]!=rhs.path[i])
                return path[i]<rhs.path[i];
        }
    }
};

class Solution{
public:
    //maxN=560000
    //maxE=280000 ~avgN=26000
    //vector<int> *G;
    vector<vector<int>> G;
    unordered_map<ui,int> idHash; //sorted id to 0...n
    vector<ui> ids; //0...n to sorted id
    vector<ui> inputs; //u-v pairs
    vector<int> inDegrees;
    vector<bool> vis;
    vector<Path> ans;
    int nodeCnt;

    void parseInput(string &testFile){
        FILE* file=fopen(testFile.c_str(),"r");
        ui u,v,c;
        int cnt=0;
        while(fscanf(file,"%u,%u,%u",&u,&v,&c)!=EOF){
            inputs.push_back(u);
            inputs.push_back(v);
            ++cnt;
        }
#ifdef TEST
        printf("%d Records in Total\n",cnt);
#endif
    }

    void constructGraph(){
        auto tmp=inputs;
        sort(tmp.begin(),tmp.end());
        tmp.erase(unique(tmp.begin(),tmp.end()),tmp.end());
        nodeCnt=tmp.size();
        ids=tmp;
        nodeCnt=0;
        for(ui &x:tmp){
            idHash[x]=nodeCnt++;
        }
#ifdef TEST
        printf("%d Nodes in Total\n",nodeCnt);
#endif
        int sz=inputs.size();
        //G=new vector<int>[nodeCnt];
        G=vector<vector<int>>(nodeCnt);
        inDegrees=vector<int>(nodeCnt,0);
        for(int i=0;i<sz;i+=2){
            int u=idHash[inputs[i]],v=idHash[inputs[i+1]];
            G[u].push_back(v);
            ++inDegrees[v];
        }
    }

    void dfs(int head,int cur,int depth,vector<int> &path){
        vis[cur]=true;
        path.push_back(cur);
        for(int &v:G[cur]){
            if(v==head && depth>=3 && depth<=7){
                vector<ui> tmp;
                for(int &x:path)
                    tmp.push_back(ids[x]);
                ans.emplace_back(Path(depth,tmp));
            }
            if(depth<7 && !vis[v] && v>head){
                dfs(head,v,depth+1,path);
            }
        }
        vis[cur]=false;
        path.pop_back();
    }

    //search from 0...n
    //由于要求id最小的在前，因此搜索的全过程中不考虑比起点id更小的节点
    void solve(){
        vis=vector<bool>(nodeCnt,false);
        vector<int> path;
        for(int i=0;i<nodeCnt;i++){
            if(i%100==0)
                cout<<i<<"/"<<nodeCnt<<endl;
            if(!G[i].empty()){
                dfs(i,i,1,path);
            }
        }
        sort(ans.begin(),ans.end());
    }

    void save(string &outputFile){
        printf("Total Loops %d\n",(int)ans.size());
        ofstream out(outputFile);
        out<<ans.size()<<endl;
        for(auto &x:ans){
            auto path=x.path;
            int sz=path.size();
            out<<path[0];
            for(int i=1;i<sz;i++)
                out<<","<<path[i];
            out<<endl;
        }
    }
};

int main()
{
    string testFile = "test_data2.txt";
    string outputFile = "output.txt";
#ifdef TEST
    string answerFile = "result.txt";
#endif
    auto t=clock();
//    for(int i=0;i<100;i++){
        Solution solution;
        solution.parseInput(testFile);
        solution.constructGraph();
        //solution.topoSort();
        solution.solve();
        solution.save(outputFile);
        cout<<clock()-t<<endl;
//    }

    return 0;
}

/**************************************************/
/**************************************************/
/**************************************************/
/**************************************************/

#include <bits/stdc++.h>

using namespace std;

#define TEST

struct Path{
    //ID最小的第一个输出；
    //总体按照循环转账路径长度升序排序；
    //同一级别的路径长度下循环转账账号ID序列，按照字典序（ID转为无符号整数后）升序排序
    int length;
    vector<int> path;

    Path(int length, const vector<int> &path) : length(length), path(path) {}

    bool operator<(const Path&rhs)const{
        if(length!=rhs.length) return length<rhs.length;
        for(int i=0;i<length;i++){
            if(path[i]!=rhs.path[i])
                return path[i]<rhs.path[i];
        }
    }
};

#define DEPTH_HIGH_LIMIT 7
#define DEPTH_LOW_LIMIT 3
class Solution{
public:
    //maxN=560000
    //maxE=280000 ~avgN=28000
    //vector<int> *G;
    vector<vector<int>> G;
    unordered_map<int,int> idHash; //sorted id to 0...n
    vector<string> idsComma; //0...n to sorted id
    vector<string> idsLF; //0...n to sorted id
    vector<int> inputs; //u-v pairs
    vector<int> inDegrees;
    vector<int> outDegrees;
    vector<bool> vis;
    vector<Path> ans[8];
    vector<int> reachable;

    //P2inv[end][mid][k]表示结点mid到达结点end，中间经过结点k的路径详情
    //estimate size 28000*[100,200]*[1,5]
    vector<unordered_map<int,vector<int>>> P2inv;
    int nodeCnt;
    int ansCnt;

    //TODO:mmap
    void parseInput(string &testFile){
        FILE* file=fopen(testFile.c_str(),"r");
        int u,v,c;
        int cnt=0;
        while(fscanf(file,"%d,%d,%d",&u,&v,&c)!=EOF){
            inputs.push_back(u);
            inputs.push_back(v);
            ++cnt;
        }
#ifdef TEST
        printf("%d Records in Total\n",cnt);
#endif
    }

    void constructGraph(){
        auto tmp=inputs;
        sort(tmp.begin(),tmp.end());
        tmp.erase(unique(tmp.begin(),tmp.end()),tmp.end());
        nodeCnt=tmp.size();
        idsComma.reserve(nodeCnt);
        idsLF.reserve(nodeCnt);
        nodeCnt=0;
        for(int &x:tmp){
            idsComma.push_back(to_string(x)+',');
            idsLF.push_back(to_string(x)+'\n');
            idHash[x]=nodeCnt++;
        }
#ifdef TEST
        printf("%d Nodes in Total\n",nodeCnt);
#endif
        int sz=inputs.size();
        //G=new vector<int>[nodeCnt];
        G=vector<vector<int>>(nodeCnt);
        inDegrees=vector<int>(nodeCnt,0);
        outDegrees=vector<int>(nodeCnt,0);
        for(int i=0;i<sz;i+=2){
            int u=idHash[inputs[i]],v=idHash[inputs[i+1]];
            G[u].push_back(v);
            ++inDegrees[v];
            ++outDegrees[u];
        }
    }

    void topoSort(vector<int> &degs,bool doSoring){
        queue<int> que;
        for(int i=0;i<nodeCnt;i++){
            if(0==degs[i])
                que.push(i);
        }
        while(!que.empty()){
            int u=que.front();
            que.pop();
            for(int &v:G[u]) {
                if(0==--degs[v])
                    que.push(v);
            }
        }
        int cnt=0;

        for(int i=0;i<nodeCnt;i++){
            if(degs[i]==0){
                G[i].clear();
                cnt++;
            }else if(doSoring){
                sort(G[i].begin(),G[i].end());
            }
        }
#ifdef TEST
        printf("%d Nodes eliminated in TopoSort\n",cnt);
#endif
    }

    void constructP2(){
        P2inv=vector<unordered_map<int,vector<int>>>(nodeCnt,unordered_map<int,vector<int>>());
        for(int i=0;i<nodeCnt;i++){
            auto &gi=G[i];
            for(int &k:gi){
                auto &gk=G[k];
                for(int &j:gk){
                    if(j!=i){
                        P2inv[j][i].push_back(k);
                    }
                }
            }

        }
        for(int i=0;i<nodeCnt;i++){
            for(auto &x:P2inv[i]){
                if(x.second.size()>1){
                    sort(x.second.begin(),x.second.end());
                }
            }
        }
    }

    void dfs(int head,int cur,int depth,vector<int> &path){
        vis[cur]=true;
        path.push_back(cur);
        auto &gCur=G[cur];
        auto it=lower_bound(gCur.begin(),gCur.end(),head);
        //handle [3,6]
        if(it!=gCur.end() && *it==head && depth>=DEPTH_LOW_LIMIT && depth<DEPTH_HIGH_LIMIT) {
            ans[depth].emplace_back(Path(depth,path));
            ++ansCnt;
        }

        if(depth<DEPTH_HIGH_LIMIT-1){
            for(;it!=gCur.end();++it){
                if(!vis[*it]){
                    dfs(head,*it,depth+1,path);
                }
            }
        }else if(reachable[cur]>-1 && depth==DEPTH_HIGH_LIMIT-1){ //handle [7]
            auto ks=P2inv[head][cur];
            int sz=ks.size();
            for(int idx=reachable[cur];idx<sz;++idx){
                int k=ks[idx];
                if(vis[k]) continue;
                auto tmp=path;
                tmp.push_back(k);
                ans[depth+1].emplace_back(Path(depth+1,tmp));
                ++ansCnt;
            }
        }
        vis[cur]=false;
        path.pop_back();
    }

    //search from 0...n
    //由于要求id最小的在前，因此搜索的全过程中不考虑比起点id更小的节点
    void solve(){
        ansCnt=0;
        constructP2();
        vis=vector<bool>(nodeCnt,false);
        vector<int> path;
        reachable=vector<int>(nodeCnt,-1);
        vector<int> currentJs(nodeCnt);
        for(int i=0;i<nodeCnt;++i){
#ifdef TEST
            if(i%100==0){
                cout<<i<<"/"<<nodeCnt<<" ~ "<<ansCnt<<endl;
            }
#endif
            if(!G[i].empty()){
                //可以通过大于head的id返回的
                for(auto &js:P2inv[i]){
                    int j=js.first;
                    if(j>i){
                        auto &val=js.second;
                        int sz=val.size();
                        int lb=lower_bound(val.begin(),val.end(),i)-val.begin();
                        if(lb<val.size()) reachable[j]=lb;
                        currentJs.push_back(j);
                    }
                }
                dfs(i,i,1,path);
                for(int &x:currentJs)
                    reachable[x]=-1;
                currentJs.clear();
            }
        }

#ifdef TEST
        for(int i=DEPTH_LOW_LIMIT;i<=DEPTH_HIGH_LIMIT;i++){
            printf("Loop Size %d: %d/%d ~ %.3lf\n",i,ans[i].size(),ansCnt,ans[i].size()*1.0/ansCnt);
        }
#endif
    }

    void save(const string &outputFile){
        auto t=clock();
        ofstream out;
        out.open(outputFile);
//      open(outputFile, O_RDWR | O_CREAT,0666);
#ifdef TEST
        printf("Total Loops %d\n",ansCnt);
#endif
        out<<ansCnt<<"\n";
        for(int i=DEPTH_LOW_LIMIT;i<=DEPTH_HIGH_LIMIT;i++) {
            //sort(ans[i].begin(),ans[i].end());
            for (auto &x:ans[i]) {
                auto path = x.path;
                int sz = path.size();
                for(int j=0;j<sz-1;j++)
                    out<<idsComma[path[j]];
                out<<idsLF[path[sz-1]];
            }
        }
        cout<<clock()-t<<endl;
    }

    void save_fputs(const string &outputFile){
        auto t=clock();
        FILE *fp = fopen(outputFile.c_str(), "w");
        char buf[1024];

#ifdef TEST
        printf("Total Loops %d\n",ansCnt);
#endif
        int idx=sprintf(buf,"%d\n",ansCnt);
        buf[idx]='\0';
        fputs(buf, fp);
        for(int i=DEPTH_LOW_LIMIT;i<=DEPTH_HIGH_LIMIT;i++) {
            //sort(ans[i].begin(),ans[i].end());
            for (auto &x:ans[i]) {
                auto path = x.path;
                int sz = path.size();
                idx=0;
                for(int j=0;j<sz-1;j++){
                    idx+=sprintf(buf+idx,"%s",idsComma[path[j]].c_str());
                }
                idx+=sprintf(buf+idx,"%s",idsLF[path[sz-1]].c_str());
                buf[idx]='\0';
                fputs(buf, fp);
            }
        }
        fclose(fp);
        cout<<clock()-t<<endl;
    }

    void save_fwrite(const string &outputFile){
        auto t=clock();
        FILE *fp = fopen(outputFile.c_str(), "wb");
        char buf[1024];

#ifdef TEST
        printf("Total Loops %d\n",ansCnt);
#endif
        int idx=sprintf(buf,"%d\n",ansCnt);
        buf[idx]='\0';
        fwrite(buf, idx , sizeof(char), fp );
        for(int i=DEPTH_LOW_LIMIT;i<=DEPTH_HIGH_LIMIT;i++) {
            //sort(ans[i].begin(),ans[i].end());
            for (auto &x:ans[i]) {
                auto path = x.path;
                int sz = path.size();
                //idx=0;
                for(int j=0;j<sz-1;j++){
                    auto res=idsComma[path[j]];
                    fwrite(res.c_str(), res.size() , sizeof(char), fp );
                }
                auto res=idsLF[path[sz-1]];
                fwrite(res.c_str(), res.size() , sizeof(char), fp );
            }
        }
        fclose(fp);
        cout<<clock()-t<<endl;
    }
};

int main()
{
    string testFile = "test_data4.txt";
    string outputFile = "output.txt";
#ifdef TEST
    string answerFile = "result.txt";
#endif
    auto t=clock();
//    for(int i=0;i<100;i++){
    Solution solution;
    solution.parseInput(testFile);
    solution.constructGraph();
    solution.topoSort(solution.inDegrees,false);
    solution.topoSort(solution.outDegrees,true);
    solution.solve();
    solution.save_fwrite(outputFile);

    cout<<clock()-t<<endl;
//    }

    return 0;
}



/**************************************************/CSDN垃圾版本
#include "bits/stdc++.h"
 
using namespace std;
 
void dfs(const vector<vector<int>> &g, vector<vector<int>> &res, vector<int> &visit, vector<int> &path, int k, int p_o)
{
    for (int i = 0; i < g.size(); i++)
    {
        if (g[k][i] == 0)
            continue;
        if (i == p_o)
        {
            res.push_back(path); //保存找到的环
            continue;
        }
        if (visit[i] == 1)
            continue;
        visit[i] = 1;
        path.push_back(i);
        dfs(g, res, visit, path, i, p_o);
        path.pop_back();
        visit[i] = 0;
    }
}
 
bool cmp(vector<int> a, vector<int> b)
{
    //输出排序比较
    if (a.size() == b.size())
    {
        for (int i = 0; i < a.size(); i++)
        {
            if (a[i] == b[i])
                continue;
            return a[i] < b[i];
        }
    }
    else
        return a.size() < b.size();
    return false;
}
bool isSame(vector<int> &a, vector<int> &b)
{
    //比较两个矩阵是否一样
    if (a.size() != b.size())
        return false;
    for (int i = 0; i < a.size(); i++)
    {
        if (a[i] != b[i])
            return false;
    }
    return true;
}
void rot_vector(vector<int> &nums)
{
    //统一环的起点，最小id为起点
    int min_num = nums[0];
    int min_idx = 0;
    for (int i = 0; i < nums.size(); i++)
    {
        if (min_num > nums[i])
        {
            min_num = nums[i];
            min_idx = i;
        }
    }
    vector<int> temp(nums);
    for (int i = 0; i < nums.size(); i++)
    {
        nums[i] = temp[(i + min_idx) % nums.size()];
    }
}
 
int main()
{
    clock_t start_time, end_time;
    start_time = clock();
    //--------------------------数据读入-----------------------------
    ifstream infile("test_data.txt");
    vector<int> ids1;
    vector<int> ids2;
    vector<int> vals;
    int id1, id2, val;
    char c;
    while (infile >> id1 >> c >> id2 >> c >> val)
    {
        ids1.push_back(id1);
        ids2.push_back(id2);
        vals.push_back(val);
    }
    //-----------------------创建有向图-----------------------------------
    int max_id = 0;
    for (int i = 0; i < ids1.size(); i++)
    {
        if (i == 0 || max_id < ids1[i])
        {
            max_id = ids1[i];
        }
        if (max_id < ids2[i])
        {
            max_id = ids2[i];
        }
    }
    cout << max_id << endl;
    max_id += 1;
    vector<int> temp(max_id, 0);
    vector<vector<int>> g(max_id, temp);
    vector<int> visit(max_id, -1);
    for (int i = 0; i < ids1.size(); i++)
    {
        visit[ids1[i]] = 0;
        visit[ids2[i]] = 0;
    }
    for (int i = 0; i < ids1.size(); i++)
    {
        g[ids1[i]][ids2[i]] = vals[i];
    }
    //-------------------深度遍历找环------------------------------------
    vector<vector<int>> res;
    vector<int> path;
    for (int i = 0; i < visit.size(); i++)
    {
        if (visit[i] == -1)
            continue;
        visit[i] = 1;
        path.push_back(i);
        dfs(g, res, visit, path, i, i);
        visit[i] = 0;
        path.pop_back();
    }
    //-----------------将环排序去重----------------------------------------
    cout << res.size() << endl;
    vector<vector<int>> res1;
    vector<vector<int>> res2;
    for (int i = 0; i < res.size(); i++)
    {
        if (res[i].size() < 3 || res[i].size() > 7)
            continue;
        rot_vector(res[i]);
        res1.push_back(res[i]);
    }
    sort(res1.begin(), res1.end(), cmp);
    res2.push_back(res1[0]);
    for (int i = 1; i < res1.size(); i++)
    {
        if (isSame(res1[i], res1[i - 1]))
            continue;
        res2.push_back(res1[i]);
    }
    //------------------输出结果--------------------------------------------
    ofstream outfile("result.txt");
    outfile << res2.size() << endl;
    for (int i = 0; i < res2.size(); i++)
    {
        for (int j = 0; j < res2[i].size(); j++)
            outfile << res2[i][j] << ",";
        outfile << endl;
    }
    end_time = clock();
    cout << " time : " << double(end_time - start_time) / CLOCKS_PER_SEC << "s" << endl;
}